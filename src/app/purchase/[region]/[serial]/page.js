'use client';

import { useState, useEffect } from "react";
import Image from "next/image";
import TopBar from "@/components/ui/top_bar";
import BottomBar from "@/components/ui/bottom_bar";
import Script from "next/script";

const PurchasePage = ({ params }) => {
  const [product, setProduct] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [downloadUrl, setDownloadUrl] = useState(null);

  useEffect(() => {
    const fetchProductData = async () => {
      try {
        const res = await fetch("/api/v1/get-product-data", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ serial: params.serial }),
        });
        const data = await res.json();
        setProduct(data);
        setIsLoading(false);
      } catch (error) {
        console.error("Error fetching product data:", error);
        setIsLoading(false);
      }
    };

    fetchProductData();
  }, [params.serial]);

  // Determine the price format based on region (case-sensitive: 'india' vs 'international')
  const price =
    params.region === "india"
      ? `â‚¹${product?.price?.INR?.toFixed(2) || "N/A"}`
      : `$${product?.price?.USD?.toFixed(2) || "N/A"}`;

  // Handle the Buy Now button logic
  const handleBuyNow = async () => {
    try {
      console.log("Filename : ", product.fileName);
      const res = await fetch("/api/v1/razorpay", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          amount: params.region === "india" ? product?.price?.INR : product?.price?.USD,
          currency: params.region === "india" ? "INR" : "USD",
          name: product?.title,
        }),
      });
      const data = await res.json();

      const options = {
        key: process.env.NEXT_PUBLIC_RAZORPAY_KEY,
        amount: data.amount * 100, // Convert to cents/paisa
        currency: data.currency,
        order_id: data.id, // Order ID generated by backend
        name: "Flexmood",
        description: product?.title,
        image: "/logo.png",
        handler: async function (response) {
          alert("Payment successful! Thank you for your purchase.");
          console.log("Payment response:", response);

          // Fetch the download URL after payment success
          const downloadRes = await fetch("/api/v1/get-download-url", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ fileName: product?.fileName }),
          });

          const downloadData = await downloadRes.json();
          if (downloadData?.url) {
            setDownloadUrl(downloadData.url);
          }
        },
        prefill: {
          name: "",
          email: "",
          contact: "",
        },
        theme: {
          color: "#3b82f6",
        },
      };

      const razorpayInstance = new Razorpay(options);
      razorpayInstance.open();

      razorpayInstance.on("payment.failed", function (response) {
        alert("Payment failed. Please try again.");
        console.error("Payment failed:", response.error);
      });
    } catch (error) {
      console.error("Error during payment process:", error);
    }
  };

  // Function to trigger download without redirecting
  const handleDownload = () => {
    if (downloadUrl) {
      // Create a temporary link element
      const link = document.createElement('a');
      link.href = downloadUrl;  // URL of the ebook from Supabase storage
      link.download = product?.fileName || "download";  // The name you want the file to have when downloaded
      
      // Programmatically trigger the download
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link); // Clean up the DOM
    }
  };
  

  return (
    <div className="flex flex-col min-h-screen bg-gray-900 text-white">
      <TopBar />
      <main className="flex-grow flex flex-col md:flex-row border-t border-gray-700">
        {/* Product Section */}
        <div className="w-full md:w-[60%] border-r border-gray-700 p-6 flex flex-col items-center justify-center">
          {isLoading ? (
            <p className="text-gray-500 animate-pulse">Loading product...</p>
          ) : product ? (
            <>
              <Image
                src={product.cover_img}
                alt={`Book: ${product.title}`}
                width={220}
                height={320}
                className="rounded-lg shadow-md mb-4"
              />
              <h1 className="text-xl font-bold mb-2">{product.title}</h1>
              <p className="text-gray-400 text-sm mb-4">by {product.author}</p>
              <p className="text-lg font-semibold">{price}</p>
            </>
          ) : (
            <p className="text-gray-500">Product not found.</p>
          )}
        </div>

        {/* Buy Button Section */}
        <div className="w-full md:w-[40%] p-6 flex flex-col justify-center items-center">
          <h2 className="text-lg font-semibold mb-6 text-center">
            Complete Your Purchase
          </h2>
          <button
            onClick={handleBuyNow}
            disabled={isLoading || !product}
            className={`w-full max-w-sm py-3 font-medium rounded-md transition-all duration-200 ${
              isLoading || !product
                ? "bg-gray-700 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            }`}
          >
            {isLoading ? "Loading..." : `Buy Now - ${price}`}
          </button>

          {/* Download Section */}
          {downloadUrl && (
            <div className="mt-6 text-center">
              <button
                onClick={handleDownload}
                className="py-3 px-6 bg-green-600 hover:bg-green-700 rounded-md"
              >
                Download eBook
              </button>
            </div>
          )}
        </div>
      </main>
      <BottomBar />

      {/* Razorpay Checkout Script */}
      <Script
        strategy="afterInteractive"
        src="https://checkout.razorpay.com/v1/checkout.js"
      />
    </div>
  );
};

export default PurchasePage;
